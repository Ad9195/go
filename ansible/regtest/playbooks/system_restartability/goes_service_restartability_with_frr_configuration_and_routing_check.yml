---

- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - shell: dpkg --list | grep kernel
      register: kernel_version
      when: not dry_run

    - debug:
        var: kernel_version.stdout_lines
      when: not dry_run


- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "goes_service_restartability_with_frr_configuration_routing_check_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf:spine
  become: true
  tasks:
    - name: Take backup of /etc/frr/zebra.conf
      command: "mv {{ frr_zebra_conf_file }} {{ frr_zebra_conf_file_bck }}"
      when: not dry_run

    - name: Copying config to /etc/frr/zebra.conf
      copy:
        src: "../../files/{{inventory_hostname}}/zebra.conf"
        dest: "{{ frr_zebra_conf_file }}"
      when: not dry_run

    - name: Take backup of /etc/frr/bgpd.conf
      copy:
        src: "{{ frr_bgp_conf_file }}"
        dest: "{{ frr_bgp_conf_file_bck }}"
        remote_src: true
      when: not dry_run

    - name: Add bgp config in /etc/frr/bgpd.conf
      blockinfile:
        path: "{{ frr_bgp_conf_file }}"
        marker: ""
        block: "{{ lookup('file', '../../files/{{inventory_hostname}}/bgp_peering_ebgp_loopback.conf') }}"
      when: not dry_run

    - name: Add dummy interface
      add_dummy_interface:
        switch_name: "{{ inventory_hostname }}"
      when: not dry_run

    - name: Restart frr
      service:
        name: frr
        state: restarted
      when: not dry_run

    - file:
        path: "{{ system_restartability_log_dir }}"
        state: directory
      when: not dry_run

    - name: Check frr status
      command: "service frr status"
      register: frr_status
      ignore_errors: no
      when: not dry_run

    - debug:
        msg: "FRR is in active state"
      when: "' Active: active ' in frr_status.stdout"

    - name: Verify frr bgp neighborship
      test_bgp_peering_if_down:
        switch_name: "{{ inventory_hostname }}"
        config_file: "{{ lookup('file', '../../files/{{inventory_hostname}}/bgp_peering_ebgp_loopback.conf') }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "3,19"
        package_name: "frr"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ system_restartability_log_dir }}"
      register: module_out
      when: not dry_run

    - name: Verify frr bgp neighborship
      test_bgp_peering_if_down:
        switch_name: "{{ inventory_hostname }}"
        config_file: "{{ lookup('file', '../../files/{{inventory_hostname}}/bgp_peering_ebgp_loopback.conf') }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "3,19"
        package_name: "frr"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ system_restartability_log_dir }}"
      register: module_out
      when: dry_run

    - name: Check process id of {{ item }}
      command: "pidof {{ item }}"
      register: pid1
      when: not dry_run

    - debug:
        msg: "{{ pid1.stdout }}"
      when: not dry_run

    - name: Kill process {{ item }}
      shell: "kill -9 {{ pid1.stdout }}"
      ignore_errors: no
      when: not dry_run

    - name: Wait few seconds for GOES to come up
      pause:
        seconds: 10
      when: not dry_run

    - name: Check goes status
      command: goes status
      register: goes_status
      ignore_errors: no
      when: not dry_run

    - debug:
        msg: "{{ goes_status.stdout }}"
      when: not dry_run

    - name: Check process id of {{ item }}
      command: "pidof {{ item }}"
      register: pid2
      when: not dry_run

    - debug:
        msg: "{{ pid2.stdout }}"
      when: not dry_run

    - name: Verify link status b/w invaders
      verify_links:
        switch_name: "{{ inventory_hostname }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31"
        platina_redis_channel: "{{ platina_redis_channel }}"
        register: link_status
      when: not dry_run

    - name: Print Link Status
      debug:
        var: link_status
      when: not dry_run

    - name: Wait few seconds for
      pause:
        seconds: 600
      when: not dry_run

    - name: Check goes status
      command: goes status
      register: goes_status
      ignore_errors: no
      when: not dry_run

    - debug:
        msg: "{{  goes_status.stdout }}"
      when: not dry_run

    - name: Check process id of {{ item }}
      command: "pidof {{ item }}"
      register: pid3
      when: not dry_run

    - debug:
        msg: "{{ pid3.stdout }}"
      when: not dry_run

    - name: Kill process {{ item }}
      shell: "kill -9 {{ pid3.stdout }}"
      ignore_errors: no
      when: not dry_run

    - name: Wait few seconds for GOES to come up
      pause:
        seconds: 10
      when: not dry_run

    - name: Check goes status
      command: goes status
      register: goes_status
      ignore_errors: no
      when: not dry_run

    - debug:
        msg: "{{ goes_status.stdout }}"
       when: not dry_run

    - name: Check process id of {{ item }}
      command: "pidof {{ item }}"
      register: pid4
      when: not dry_run

    - debug:
        msg: "{{ pid4.stdout }}"
      when: not dry_run

    - name: Verify link status b/w invaders
      verify_links:
        switch_name: "{{ inventory_hostname }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31"
        platina_redis_channel: "{{ platina_redis_channel }}"
      register: link_status
      when: not dry_run

    - name: Print Link Status
      debug:
        var: link_status
      when: not dry_run

    - name: Copying config to /etc/frr/zebra.conf
      copy:
        src: "../../files/{{inventory_hostname}}/zebra_routing_check.conf"
        dest: "{{ frr_zebra_conf_file }}"
      when: not dry_run

    - name: Restart frr
      service:
        name: frr
        state: restarted
      when: not dry_run

    - name: Check frr status
      command: "service frr status"
      register: frr_status
      ignore_errors: no
      when: not dry_run

    - debug:
        msg: "FRR is in active state"
      when: "' Active: active ' in frr_status.stdout"

    - name: Wait few seconds
      pause:
        seconds: 35
      when: not dry_run

    - name: Verify frr bgp neighborship
      test_bgp_peering_if_down:
        switch_name: "{{ inventory_hostname }}"
        config_file: "{{ lookup('file', '../../files/{{inventory_hostname}}/bgp_peering_ebgp_loopback.conf') }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "3,19"
        package_name: "frr"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ system_restartability_log_dir }}"
      register: module_out
      when: not dry_run

    - name: Verify frr bgp neighborship
      test_bgp_peering_if_down:
        switch_name: "{{ inventory_hostname }}"
        config_file: "{{ lookup('file', '../../files/{{inventory_hostname}}/bgp_peering_ebgp_loopback.conf') }}"
        leaf_list: "{{ groups['leaf'] }}"
        eth_list: "3,19"
        package_name: "frr"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ system_restartability_log_dir }}"
      register: module_out
      when: dry_run
