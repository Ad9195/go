---

- hosts: leaf:spine
  become: true
  ignore_errors: yes
  tasks:
    - shell: dpkg --list | grep kernel
      register: kernel_version
      when: not dry_run

    - debug:
        var: kernel_version.stdout_lines
      when: not dry_run


- hosts: server_emulator
  become: true

  tasks:
    - command: "date +%Y%m%d%T"
      register: start_time

    - set_fact:
        hash_name: "issue_137_{{ start_time.stdout }}"
        start_time: "{{ start_time.stdout }}"


- hosts: leaf[0]:spine[0]
  become: true
  tasks:
    - file:
        path: "{{ port_provision_log_dir }}"
        state: directory
      when: not dry_run

    - name: Copy port provisioned interfaces file to /etc/network/interfaces
      template:
        src: "../../files/{{inventory_hostname}}/issue_137.conf"
        dest: "{{ network_interfaces_file }}"
      when: not dry_run

    - name: Copy goesd-platina-mk1-modprobe.conf file
      template:
        src: "../../files/issue_137_modprobe.conf"
        dest: "{{ goesd_modprobe_file }}"
      when: not dry_run

    - name: Update interfaces file for fiber ports
      test_fiber_ports:
        cmd : "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
      register: fmodule_out

    - name: Execute commands
      command: "{{ item }}"
      with_items:
      - 'rmmod platina-mk1'
      - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
      - 'ifdown -a --allow vnet'
      - 'ifup -a --allow vnet'
      - 'goes restart'
      when: not dry_run

    - set_fact:
        commands: "{{ item }}"
      with_items:
      - 'rmmod platina-mk1'
      - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
      - 'ifdown -a --allow vnet'
      - 'ifup -a --allow vnet'
      - 'goes restart'
      when: dry_run

    - name: Wait few seconds for GOES to come up
      pause:
        seconds: 10
      when: not dry_run

    - name: Goes status
      command: goes status
      register: result
      retries: "{{ goes_retry }}"
      delay: "{{ goes_delay }}"
      until: result.rc == 0
      when: not dry_run

    - name: networking status
      command: etc/init.d/networking status
      register: result
      retries: "{{ goes_retry }}"
      delay: "{{ goes_delay }}"
      until: result.rc == 0
      when: not dry_run

    - name: verify port-provisioned port parameters
      test_issue137:
        port: 3
        switch_name: "{{ inventory_hostname }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
      register: module_out


- hosts: spine[0]
  become: true
  tasks:
    - name: Copy port provisioned interfaces file to /etc/network/interfaces
        template:
          src: "../../files/{{inventory_hostname}}/issue_137_1.conf"
          dest: "{{ network_interfaces_file }}"
        when: not dry_run


- hosts: leaf[0]:spine[0]
  become: true
  tasks:
    - name: Execute commands
      command: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: not dry_run

    - set_fact:
        commands: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: dry_run

    - name: networking status
      command: etc/init.d/networking status
      register: result
      retries: "{{ goes_retry }}"
      delay: "{{ goes_delay }}"
      until: result.rc == 0
      when: not dry_run

    - name: verify port-provisioned port parameters
      test_issue137:
        port: 3
        switch_name: "{{ inventory_hostname }}"
        hash_name: "{{ hostvars['server_emulator']['hash_name'] }}"
        log_dir_path: "{{ issues_log_dir }}"
        spine_list: "{{ groups['spine'] }}"
        autoneg: 'on'
      register: module_out

- hosts: leaf[0]:spine[0]
  become: true
  tasks:
    - name: Copy port provisioned interfaces file to /etc/network/interfaces
      template:
        src: "../../files/{{inventory_hostname}}/issue_137.conf"
        dest: "{{ network_interfaces_file }}"
      when: not dry_run

    - name: Update interfaces file for fiber ports
      test_fiber_ports:
        cmd: "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
      register: fmodule_out

    - name: Execute commands
      command: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: not dry_run

    - set_fact:
        commands: "{{ item }}"
      with_items:
        - 'rmmod platina-mk1'
        - "modprobe platina-mk1 provision={{ fmodule_out.hash_dict['command'] }}"
        - 'ifdown -a --allow vnet'
        - 'ifup -a --allow vnet'
        - 'goes restart'
      when: dry_run








