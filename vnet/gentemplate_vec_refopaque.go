// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=vnet -id RefOpaque -d VecType=RefOpaqueVec -d Type=RefOpaque github.com/platinasystems/go/elib/vec.tmpl]

// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package vnet

import (
	"github.com/platinasystems/go/elib"
)

type RefOpaqueVec []RefOpaque

func (p *RefOpaqueVec) Resize(n uint) {
	c := elib.Index(cap(*p))
	l := elib.Index(len(*p)) + elib.Index(n)
	if l > c {
		c = elib.NextResizeCap(l)
		q := make([]RefOpaque, l, c)
		copy(q, *p)
		*p = q
	}
	*p = (*p)[:l]
}

func (p *RefOpaqueVec) validate(new_len uint, zero RefOpaque) *RefOpaque {
	c := elib.Index(cap(*p))
	lʹ := elib.Index(len(*p))
	l := elib.Index(new_len)
	if l <= c {
		// Need to reslice to larger length?
		if l > lʹ {
			*p = (*p)[:l]
			for i := lʹ; i < l; i++ {
				(*p)[i] = zero
			}
		}
		return &(*p)[l-1]
	}
	return p.validateSlowPath(zero, c, l, lʹ)
}

func (p *RefOpaqueVec) validateSlowPath(zero RefOpaque, c, l, lʹ elib.Index) *RefOpaque {
	if l > c {
		cNext := elib.NextResizeCap(l)
		q := make([]RefOpaque, cNext, cNext)
		copy(q, *p)
		for i := c; i < cNext; i++ {
			q[i] = zero
		}
		*p = q[:l]
	}
	if l > lʹ {
		*p = (*p)[:l]
	}
	return &(*p)[l-1]
}

func (p *RefOpaqueVec) Validate(i uint) *RefOpaque {
	var zero RefOpaque
	return p.validate(i+1, zero)
}

func (p *RefOpaqueVec) ValidateInit(i uint, zero RefOpaque) *RefOpaque {
	return p.validate(i+1, zero)
}

func (p *RefOpaqueVec) ValidateLen(l uint) (v *RefOpaque) {
	if l > 0 {
		var zero RefOpaque
		v = p.validate(l, zero)
	}
	return
}

func (p *RefOpaqueVec) ValidateLenInit(l uint, zero RefOpaque) (v *RefOpaque) {
	if l > 0 {
		v = p.validate(l, zero)
	}
	return
}

func (p RefOpaqueVec) Len() uint { return uint(len(p)) }
