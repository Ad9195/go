// Copyright 2016 Platina Systems, Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// autogenerated: do not edit!
// generated from gentemplate [gentemplate -d Package=cpu.-id linkStatusElogEvent -d Type=linkStatusElogEvent github.com/platinasystems/go/elib/elog/event.tmpl]

package cpu

import (
	"github.com/platinasystems/go/elib/elog"
)

var linkStatusElogEventType = &elog.EventType{
	Name: "cpu.linkStatusElogEvent",
}

func init() {
	t := linkStatusElogEventType
	t.Stringer = stringer_linkStatusElogEvent
	t.Encode = encode_linkStatusElogEvent
	t.Decode = decode_linkStatusElogEvent
	elog.RegisterType(linkStatusElogEventType)
}

func stringer_linkStatusElogEvent(e *elog.Event) string {
	var x linkStatusElogEvent
	x.Decode(e.Data[:])
	return x.String()
}

func encode_linkStatusElogEvent(b []byte, e *elog.Event) int {
	var x linkStatusElogEvent
	x.Decode(e.Data[:])
	return x.Encode(b)
}

func decode_linkStatusElogEvent(b []byte, e *elog.Event) int {
	var x linkStatusElogEvent
	x.Decode(b)
	return x.Encode(e.Data[:])
}

func (x linkStatusElogEvent) Log() { x.Logb(elog.DefaultBuffer) }

func (x linkStatusElogEvent) Logb(b *elog.Buffer) {
	e := b.Add(linkStatusElogEventType)
	x.Encode(e.Data[:])
}
